{
  "tutorials": [
    {
      "name": "Basic javascript env",
      "link": "basic-javascript-env",
      "description": "A simple javascript game environment to create html5 canvas games using npm node scripts."
    },
    {
      "name": "Simple typescript canvas game project setup",
      "link": "simple-typescript-canvas-game-project-setup",
      "description": "A simple typescript game project structure to create html5 canvas games using npm node scripts."
    },
    {
      "name": "Cold reloading typescript project",
      "link": "cold-reloading-typescript-project",
      "description": "A simple typescript game project structure with cold reloading to create html5 canvas games using npm node scripts."
    },
    {
      "name": "Canvas operations",
      "link": "basic-canvas-html5-operations",
      "description": "A simple typescript game project structure that demonstrates html5 canvas operations."
    },
    {
      "name": "Keyboard html5 input events",
      "link": "keyboard-html5-input-events",
      "description": "A simple typescript game project that demonstrates keyboard html5 input events."
    },
    {
      "name": "Basic game loop typescript",
      "link": "basic-game-loop-typescript",
      "description": "A simple typescript game project that demonstrates a basic game loop."
    },
    {
      "name": "Blake the snake game",
      "link": "blake-the-snake-game",
      "description": "Blake the snake is a simple typescript game that utilises everything covered in the intro to typescript game tutorial series."
    }, 
    {
      "name": "Mouse event listener input html canvas",
      "link": "mouse-event-listener-input-html-canvas",
      "description": "This example demonstrates basic mouse input events for a simple typescript game project structure to create html5 canvas games."
    },
    {
      "name": "Keyboard input player controller 2d",
      "link": "keyboard-input-player-controller-2d",
      "description": "This is part of a series demonstrating the command pattern for 2d game player movement. This demonstrates a basic keyboard input controller for 2d movement (up, down, left, right)."
    },
    {
      "name": "Keyboard event game input map",
      "link": "keyboard-event-game-input-map",
      "description": "Example of 2d game player movement on how to create a generic player input map control system for HTML keyboard events in a javascript typescript game."
    },
    {
      "name": "Command pattern standard input",
      "link": "command-pattern-standard-input",
      "description": "An example that implements the command pattern for standard keyboard input in a HTML5 Javascript Typescript game."
    },
    {
      "name": "Gamepad input Javascript game",
      "link": "gamepad-input-javascript-game",
      "description": "An example for enabling gamepad controller input in a HTML5 Javascript Typescript game."
    },
    {
      "name": "Mutiplayer javascript game input",
      "link": "multiplayer-javascript-game-input",
      "description": "An example for enabling multiplayer input in a HTML5 Javascript Typescript game."
    },
    {
      "name": "Javascript copy deeply nested object",
      "link": "javascript-copy-deeply-nested-object",
      "description": "Copy a deeply nested Javascript Typescript object by value vs reference for game development using structuredClone."
    },
    {
      "name": "Javascript advanced game loop design",
      "link": "javascript-advanced-game-loop-design",
      "description": "The first lesson in a course that teaches how to design an advanced game loop in Javascript that handles lag and different framerates."
    },
    {
      "name": "Javascript request animation frame draw cycle",
      "link": "javascript-request-animation-frame",
      "description": "In this tutorial we discuss how requestAnimationFrame is preferred over `setInterval` for a more performant draw game loop lifecycle."
    },
    {
      "name": "Javascript web worker set interval game loop",
      "link": "javascript-web-worker-set-interval-game-loop",
      "description": "Use a Javascript web worker and setInterval to power a game loop that continues running even when the browser is inactive."
    }
  ]
}
